name: KBO 자동 데이터 크롤링 및 업데이트

on:
  schedule:
    # 한국시간 기준: 오후 6시, 오후 10시, 밤 12시 (UTC +9시간 차이)
    - cron: '0 9 * * *'   # UTC 09:00 = KST 18:00 (오후 6시)
    - cron: '0 13 * * *'  # UTC 13:00 = KST 22:00 (오후 10시)
    - cron: '0 15 * * *'  # UTC 15:00 = KST 00:00 (밤 12시)
  workflow_dispatch: # 수동 실행 허용
    inputs:
      skip_crawling:
        description: '크롤링 건너뛰기 (데이터 처리만)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'false'
          - 'true'

# GitHub Pages 배포를 위한 권한 설정
permissions:
  contents: write  # 코드 체크아웃 및 커밋
  pages: write     # GitHub Pages 배포
  id-token: write  # OIDC 토큰 (Pages 배포용)

jobs:
  kbo-auto-update:
    runs-on: ubuntu-latest
    
    steps:
    # 1. 저장소 체크아웃
    - name: 📁 저장소 체크아웃
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    # 2. Node.js 환경 설정
    - name: 🟢 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    # 3. Python 환경 설정
    - name: 🐍 Python 설정
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    # 4. Chrome 브라우저 설치 (크롤링용)
    - name: 🌐 Chrome 브라우저 설치
      uses: browser-actions/setup-chrome@latest
      with:
        chrome-version: stable

    # 5. 환경변수 설정
    - name: ⚙️ 환경변수 설정
      run: |
        echo "GITHUB_ACTIONS=true" >> $GITHUB_ENV
        echo "KBO_PROJECT_ROOT=${{ github.workspace }}" >> $GITHUB_ENV
        echo "NODE_ENV=production" >> $GITHUB_ENV
        echo "KBO_LOG_LEVEL=INFO" >> $GITHUB_ENV

    # 6. 의존성 설치
    - name: 📦 Node.js 의존성 설치
      run: npm ci

    - name: 📦 Python 의존성 설치
      run: |
        if [ -f magic-number/crawlers/requirements.txt ]; then
          pip install -r magic-number/crawlers/requirements.txt
        else
          pip install selenium beautifulsoup4
        fi

    # 7. 경로 시스템 검증
    - name: 🔍 프로젝트 경로 검증
      run: npm test

    # 8. KBO 데이터 크롤링 (조건부)
    - name: 🕷️ KBO 데이터 크롤링
      if: ${{ github.event.inputs.skip_crawling != 'true' }}
      run: |
        echo "🚀 KBO 크롤링 시작..."
        npm run crawl
        echo "✅ 크롤링 완료"
      continue-on-error: true

    # 9. 데이터 처리 및 변환
    - name: 📊 시즌 데이터 처리
      run: |
        echo "📈 시즌 데이터 처리 시작..."
        npm run process
        echo "✅ 데이터 처리 완료"

    # 10. 매직넘버 매트릭스 생성
    - name: 🔮 매직넘버 매트릭스 생성
      run: |
        echo "🎯 매직넘버 매트릭스 생성 중..."
        npm run matrix
        echo "✅ 매트릭스 생성 완료"

    # 11. 일일 스냅샷 저장
    - name: 📸 일일 순위 스냅샷 저장
      run: |
        echo "💾 일일 스냅샷 저장 중..."
        npm run snapshot
        echo "✅ 스냅샷 저장 완료"
        
    # 12. 변경사항 확인 및 커밋
    - name: 📝 변경사항 확인
      id: check_changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "KBO Auto Crawler"
        
        # 변경사항 있는지 확인
        if [ -n "$(git status --porcelain)" ]; then
          echo "changes_detected=true" >> $GITHUB_OUTPUT
          echo "📋 변경사항 발견됨"
          git status --short
        else
          echo "changes_detected=false" >> $GITHUB_OUTPUT
          echo "📋 변경사항 없음"
        fi

    # 13. 자동 커밋 (변경사항이 있을 때만)
    - name: 🔄 자동 커밋 및 푸시
      if: steps.check_changes.outputs.changes_detected == 'true'
      run: |
        # 현재 시간 (한국시간)
        CURRENT_TIME=$(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M')
        CURRENT_HOUR=$(TZ='Asia/Seoul' date '+%H')
        
        # 시간대별 이모지 및 메시지
        if [ "$CURRENT_HOUR" -ge 18 ] && [ "$CURRENT_HOUR" -lt 22 ]; then
          TIME_EMOJI="🌅"
          TIME_MSG="오후 6시 경기 결과 업데이트"
        elif [ "$CURRENT_HOUR" -ge 22 ] || [ "$CURRENT_HOUR" -lt 2 ]; then
          TIME_EMOJI="🌆"
          TIME_MSG="오후 10시 경기 결과 업데이트"
        else
          TIME_EMOJI="🌙"
          TIME_MSG="최종 경기 결과 업데이트"
        fi
        
        # 커밋 메시지 생성
        git add .
        git commit -m "🤖 KBO 데이터 자동 업데이트 - ${CURRENT_TIME}

        ${TIME_EMOJI} ${TIME_MSG}
        🎯 PathManager 기반 안정적 데이터 처리 완료
        📊 순위표, 매직넘버, 상대전적 업데이트
        📸 일일 스냅샷 히스토리 저장
        
        🤖 Generated with GitHub Actions
        Co-Authored-By: KBO-Auto-Crawler <action@github.com>"
        
        # 푸시 실행
        git push
        echo "✅ 자동 커밋 및 푸시 완료"

    # 14. 실행 결과 요약
    - name: 📊 실행 결과 요약
      if: always()
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎯 KBO 자동 업데이트 완료 - $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M')"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        # 데이터 파일 확인
        echo "📁 데이터 파일 현황:"
        if [ -f magic-number/data/service-data.json ]; then
          SERVICE_SIZE=$(du -h magic-number/data/service-data.json | cut -f1)
          echo "  ✅ service-data.json (${SERVICE_SIZE})"
        fi
        if [ -f magic-number/data/kbo-rankings.json ]; then
          RANKING_SIZE=$(du -h magic-number/data/kbo-rankings.json | cut -f1)
          echo "  ✅ kbo-rankings.json (${RANKING_SIZE})"
        fi
        if [ -f magic-number/history/daily/$(TZ='Asia/Seoul' date '+%Y-%m-%d').json ]; then
          SNAPSHOT_SIZE=$(du -h magic-number/history/daily/$(TZ='Asia/Seoul' date '+%Y-%m-%d').json | cut -f1)
          echo "  ✅ 오늘 스냅샷 (${SNAPSHOT_SIZE})"
        fi
        
        # 히스토리 통계
        if [ -d magic-number/history/daily ]; then
          DAILY_COUNT=$(ls -1 magic-number/history/daily/*.json 2>/dev/null | wc -l)
          echo "  📈 총 히스토리: ${DAILY_COUNT}개 일일 스냅샷"
        fi
        
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

    # 15. GitHub Pages 배포 (데이터 업데이트 직후 바로 배포)
    - name: ⚙️ GitHub Pages 설정
      if: steps.check_changes.outputs.changes_detected == 'true'
      uses: actions/configure-pages@v3

    - name: 🚀 GitHub Pages 배포 준비
      if: steps.check_changes.outputs.changes_detected == 'true'
      run: |
        echo "🌐 GitHub Pages 배포 시작..."
        
        # magic-number 폴더 존재 확인
        if [ ! -d "magic-number" ]; then
          echo "❌ magic-number 폴더를 찾을 수 없습니다."
          exit 1
        fi
        
        # 주요 파일들 배포 준비 확인
        echo "📁 배포할 파일들 확인:"
        echo "  - index.html: $([ -f magic-number/index.html ] && echo '✅' || echo '❌')"
        echo "  - service-data.json: $([ -f magic-number/data/service-data.json ] && echo '✅' || echo '❌')"
        echo "  - kbo-rankings.json: $([ -f magic-number/data/kbo-rankings.json ] && echo '✅' || echo '❌')"
        
        # 히스토리 파일 수 확인
        if [ -d magic-number/history/daily ]; then
          HISTORY_COUNT=$(ls -1 magic-number/history/daily/*.json 2>/dev/null | wc -l)
          echo "  - 일일 히스토리: ${HISTORY_COUNT}개 파일"
        fi
        
        echo "✅ 배포 준비 완료"

    - name: 📦 Pages 아티팩트 업로드
      if: steps.check_changes.outputs.changes_detected == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        # magic-number 폴더만 GitHub Pages로 배포
        path: './magic-number'

    - name: 🌐 Pages 배포 실행
      if: steps.check_changes.outputs.changes_detected == 'true'
      id: pages_deployment
      uses: actions/deploy-pages@v3

    # 16. 최종 완료 알림
    - name: 🎉 전체 프로세스 완료 알림
      if: always()
      run: |
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        echo "🎯 KBO 자동 업데이트 & 배포 완료 - $(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M')"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
        
        if [ "${{ steps.check_changes.outputs.changes_detected }}" == "true" ]; then
          echo "✅ 데이터 업데이트: 완료"
          echo "✅ 자동 커밋: 완료" 
          echo "✅ GitHub Pages 배포: 완료"
          if [ -n "${{ steps.pages_deployment.outputs.page_url }}" ]; then
            echo "🌐 배포 URL: ${{ steps.pages_deployment.outputs.page_url }}"
          fi
        else
          echo "📋 변경사항이 없어서 배포를 건너뜁니다"
        fi
        
        echo "📅 다음 실행 스케줄:"
        echo "   - 🌅 오후 6시 (한국시간 18:00)"
        echo "   - 🌆 오후 10시 (한국시간 22:00)"  
        echo "   - 🌙 밤 12시 (한국시간 00:00)"
        echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"