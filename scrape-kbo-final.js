#!/usr/bin/env node

/**
 * KBO Ìôà/Ïñ¥Ïõ®Ïù¥ ÏÉÅÎåÄÏ†ÑÏ†Å Îç∞Ïù¥ÌÑ∞ Ïä§ÌÅ¨ÎûòÌïë (ÏµúÏ¢Ö Î≤ÑÏ†Ñ)
 * Ïã§Ï†ú HTML Íµ¨Ï°∞Ïóê ÎßûÏ∂ò Ï†ïÌôïÌïú ÌååÏã±
 */

const axios = require('axios');
const cheerio = require('cheerio');
const fs = require('fs');

// Ïó†Î∏îÎüº ÌååÏùºÎ™ÖÏúºÎ°ú ÌåÄÎ™Ö Îß§Ìïë
const EMBLEM_TO_TEAM = {
    'emblem_KT.png': 'KT',
    'emblem_LG.png': 'LG',
    'emblem_WO.png': 'ÌÇ§ÏõÄ',
    'emblem_SK.png': 'SSG',
    'emblem_NC.png': 'NC',
    'emblem_LT.png': 'Î°ØÎç∞',
    'emblem_OB.png': 'ÎëêÏÇ∞',
    'emblem_HT.png': 'KIA',
    'emblem_SS.png': 'ÏÇºÏÑ±',
    'emblem_HH.png': 'ÌïúÌôî'
};

// ÌåÄÎ™Ö Ï†ïÍ∑úÌôî
const TEAM_NAMES = ['ÌïúÌôî', 'LG', 'Î°ØÎç∞', 'KT', 'KIA', 'ÏÇºÏÑ±', 'SSG', 'NC', 'ÎëêÏÇ∞', 'ÌÇ§ÏõÄ'];

class KBOFinalScraper {
    constructor() {
        this.homeAwayRecords = {};
        this.gameResults = [];
        this.initializeRecords();
        
        this.client = axios.create({
            timeout: 15000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
        });
    }

    initializeRecords() {
        TEAM_NAMES.forEach(team1 => {
            this.homeAwayRecords[team1] = {};
            TEAM_NAMES.forEach(team2 => {
                if (team1 !== team2) {
                    this.homeAwayRecords[team1][team2] = {
                        home: { wins: 0, losses: 0, draws: 0 },
                        away: { wins: 0, losses: 0, draws: 0 }
                    };
                }
            });
        });
    }

    getTeamFromEmblem(emblemSrc) {
        const fileName = emblemSrc.split('/').pop();
        return EMBLEM_TO_TEAM[fileName] || null;
    }

    async fetchScoreboardData(date) {
        try {
            const url = 'https://www.koreabaseball.com/Schedule/ScoreBoard.aspx';
            const params = { 
                seriesId: 1, 
                gameDate: date 
            };
            
            console.log(`  üì° ${date} Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠...`);
            const response = await this.client.get(url, { params });
            return response.data;
        } catch (error) {
            console.log(`  ‚ùå ${date} ÏöîÏ≤≠ Ïã§Ìå®: ${error.message}`);
            return null;
        }
    }

    parseGameResults(html, date) {
        const $ = cheerio.load(html);
        const games = [];

        // Í∞Å Í≤ΩÍ∏∞ Î∏îÎ°ù Ï∞æÍ∏∞
        $('.gameBox').each((gameIndex, gameElement) => {
            try {
                const $game = $(gameElement);
                
                // ÏõêÏ†ïÌåÄ Ï†ïÎ≥¥ (leftTeam)
                const $leftTeam = $game.find('.leftTeam');
                const awayEmblemSrc = $leftTeam.find('img').attr('src') || '';
                const awayTeamText = $leftTeam.find('strong.teamT').text().trim();
                const awayScoreText = $leftTeam.find('.score span').text().trim();
                
                // ÌôàÌåÄ Ï†ïÎ≥¥ (rightTeam)
                const $rightTeam = $game.find('.rightTeam');
                const homeEmblemSrc = $rightTeam.find('img').attr('src') || '';
                const homeTeamText = $rightTeam.find('strong.teamT').text().trim();
                const homeScoreText = $rightTeam.find('.score span').text().trim();
                
                // Í≤ΩÍ∏∞ ÏÉÅÌÉú
                const gameStatus = $game.find('strong.flag span').text().trim();
                
                // ÌåÄÎ™Ö Îß§Ìïë (Ïó†Î∏îÎüºÍ≥º ÌÖçÏä§Ìä∏ Îëò Îã§ ÏÇ¨Ïö©)
                const awayTeam = this.getTeamFromEmblem(awayEmblemSrc) || awayTeamText;
                const homeTeam = this.getTeamFromEmblem(homeEmblemSrc) || homeTeamText;
                
                // Ï†êÏàò ÌååÏã±
                const awayScore = parseInt(awayScoreText) || 0;
                const homeScore = parseInt(homeScoreText) || 0;
                
                // Í≤ΩÍ∏∞ Ï¢ÖÎ£å Ïó¨Î∂Ä ÌôïÏù∏
                const isFinished = gameStatus.includes('Ï¢ÖÎ£å') || 
                                  gameStatus.includes('Í≤ΩÍ∏∞Ï¢ÖÎ£å') ||
                                  (awayScoreText !== '' && homeScoreText !== '' && 
                                   !isNaN(awayScore) && !isNaN(homeScore));

                console.log(`    üîç Í≤ΩÍ∏∞ ${gameIndex + 1}: ${awayTeam} vs ${homeTeam} - ${gameStatus}`);
                
                if (isFinished && TEAM_NAMES.includes(awayTeam) && TEAM_NAMES.includes(homeTeam)) {
                    const result = awayScore > homeScore ? 'away_win' : 
                                  homeScore > awayScore ? 'home_win' : 'draw';
                    
                    const game = {
                        date,
                        awayTeam,
                        homeTeam,
                        awayScore,
                        homeScore,
                        result,
                        status: gameStatus
                    };
                    
                    games.push(game);
                    console.log(`    ‚úÖ ${awayTeam} ${awayScore} : ${homeScore} ${homeTeam} (${result})`);
                } else if (isFinished) {
                    console.log(`    ‚ö†Ô∏è Ïïå Ïàò ÏóÜÎäî ÌåÄ: ${awayTeam} vs ${homeTeam}`);
                } else {
                    console.log(`    ‚è∏Ô∏è ÎØ∏ÏôÑÎ£å Í≤ΩÍ∏∞: ${awayTeam} vs ${homeTeam} (${gameStatus})`);
                }
                
            } catch (error) {
                console.log(`    ‚ùå Í≤ΩÍ∏∞ ÌååÏã± Ïò§Î•ò: ${error.message}`);
            }
        });

        return games;
    }

    updateRecords(games) {
        games.forEach(game => {
            const { homeTeam, awayTeam, result } = game;
            
            // ÌôàÌåÄ Í∏∞Ï§Ä ÏóÖÎç∞Ïù¥Ìä∏
            if (result === 'home_win') {
                this.homeAwayRecords[homeTeam][awayTeam].home.wins++;
                this.homeAwayRecords[awayTeam][homeTeam].away.losses++;
            } else if (result === 'away_win') {
                this.homeAwayRecords[homeTeam][awayTeam].home.losses++;
                this.homeAwayRecords[awayTeam][homeTeam].away.wins++;
            } else if (result === 'draw') {
                this.homeAwayRecords[homeTeam][awayTeam].home.draws++;
                this.homeAwayRecords[awayTeam][homeTeam].away.draws++;
            }
        });
        
        this.gameResults.push(...games);
    }

    async scrapeSeasonData(startDate = '20250301', endDate = null) {
        if (!endDate) {
            endDate = new Date().toISOString().split('T')[0].replace(/-/g, '');
        }
        
        console.log(`üèüÔ∏è KBO ${startDate}~${endDate} Í≤ΩÍ∏∞ Í≤∞Í≥º ÏàòÏßë Ï§ë...`);
        
        const start = new Date(startDate.slice(0, 4), parseInt(startDate.slice(4, 6)) - 1, startDate.slice(6, 8));
        const end = new Date(endDate.slice(0, 4), parseInt(endDate.slice(4, 6)) - 1, endDate.slice(6, 8));
        
        let totalGames = 0;
        let successDays = 0;
        let currentDate = new Date(start);
        
        while (currentDate <= end) {
            const dateString = currentDate.getFullYear() + 
                              String(currentDate.getMonth() + 1).padStart(2, '0') + 
                              String(currentDate.getDate()).padStart(2, '0');
            
            try {
                console.log(`üìÖ ${dateString} (${currentDate.toLocaleDateString('ko-KR')}) Ï≤òÎ¶¨ Ï§ë...`);
                
                const html = await this.fetchScoreboardData(dateString);
                if (!html) {
                    currentDate.setDate(currentDate.getDate() + 1);
                    continue;
                }
                
                const games = this.parseGameResults(html, dateString);
                
                if (games.length > 0) {
                    this.updateRecords(games);
                    totalGames += games.length;
                    successDays++;
                    console.log(`  ‚úÖ ${games.length}Í≤ΩÍ∏∞ Ï≤òÎ¶¨ ÏôÑÎ£å`);
                } else {
                    console.log(`  ‚ö™ Í≤ΩÍ∏∞ ÏóÜÏùå`);
                }
                
                // API Î∂ÄÌïò Î∞©ÏßÄ
                await new Promise(resolve => setTimeout(resolve, 1000));
                
            } catch (error) {
                console.log(`  ‚ùå ${dateString} Ï≤òÎ¶¨ Ïã§Ìå®: ${error.message}`);
            }
            
            currentDate.setDate(currentDate.getDate() + 1);
        }
        
        console.log(`\nüéØ ÏàòÏßë ÏôÑÎ£å: ${totalGames}Í≤ΩÍ∏∞ (${successDays}Ïùº)`);
        return totalGames;
    }

    generateData() {
        const combinedData = {};
        const homeAwayData = {};
        
        TEAM_NAMES.forEach(team1 => {
            combinedData[team1] = {};
            homeAwayData[team1] = {};
            
            TEAM_NAMES.forEach(team2 => {
                if (team1 !== team2) {
                    const record = this.homeAwayRecords[team1][team2];
                    
                    // Ï†ÑÏ≤¥ Ï†ÑÏ†Å
                    const totalWins = record.home.wins + record.away.wins;
                    const totalLosses = record.home.losses + record.away.losses;
                    const totalDraws = record.home.draws + record.away.draws;
                    combinedData[team1][team2] = `${totalWins}-${totalLosses}-${totalDraws}`;
                    
                    // Ìôà/Ïñ¥Ïõ®Ïù¥ Íµ¨Î∂Ñ Ï†ÑÏ†Å
                    homeAwayData[team1][team2] = {
                        home: `${record.home.wins}-${record.home.losses}-${record.home.draws}`,
                        away: `${record.away.wins}-${record.away.losses}-${record.away.draws}`,
                        homeWinRate: record.home.wins + record.home.losses > 0 ? 
                            (record.home.wins / (record.home.wins + record.home.losses)) : 0.5,
                        awayWinRate: record.away.wins + record.away.losses > 0 ? 
                            (record.away.wins / (record.away.wins + record.away.losses)) : 0.5
                    };
                }
            });
        });
        
        return {
            lastUpdated: new Date().toISOString(),
            totalGames: this.gameResults.length,
            scrapedData: combinedData,
            homeAwayBreakdown: homeAwayData,
            recentGames: this.gameResults.slice(-30)
        };
    }

    async saveData() {
        const data = this.generateData();
        
        // JSON ÌååÏùº Ï†ÄÏû•
        fs.writeFileSync('./magic-number/kbo-homeaway-data.json', JSON.stringify(data, null, 2));
        
        // JavaScript ÌååÏùº Ï†ÄÏû•
        const jsContent = `// KBO Ìôà/Ïñ¥Ïõ®Ïù¥ ÏÉÅÎåÄÏ†ÑÏ†Å Îç∞Ïù¥ÌÑ∞ (ÏûêÎèô Ïä§ÌÅ¨ÎûòÌïë)
// ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: ${data.lastUpdated}
// ÏàòÏßëÎêú Í≤ΩÍ∏∞ Ïàò: ${data.totalGames}

const homeAwayRecords = ${JSON.stringify(data.homeAwayBreakdown, null, 2)};

// ÌôàÏóêÏÑúÏùò Ï†ÑÏ†Å Ï°∞Ìöå Ìï®Ïàò
function getHomeRecord(team1, team2) {
    return homeAwayRecords[team1] && homeAwayRecords[team1][team2] ? 
           homeAwayRecords[team1][team2].home : null;
}

// ÏõêÏ†ïÏóêÏÑúÏùò Ï†ÑÏ†Å Ï°∞Ìöå Ìï®Ïàò
function getAwayRecord(team1, team2) {
    return homeAwayRecords[team1] && homeAwayRecords[team1][team2] ? 
           homeAwayRecords[team1][team2].away : null;
}

// Ìôà ÏäπÎ•† Ï°∞Ìöå Ìï®Ïàò
function getHomeWinRate(team1, team2) {
    return homeAwayRecords[team1] && homeAwayRecords[team1][team2] ? 
           homeAwayRecords[team1][team2].homeWinRate : 0.5;
}

// ÏõêÏ†ï ÏäπÎ•† Ï°∞Ìöå Ìï®Ïàò
function getAwayWinRate(team1, team2) {
    return homeAwayRecords[team1] && homeAwayRecords[team1][team2] ? 
           homeAwayRecords[team1][team2].awayWinRate : 0.5;
}

console.log('üèüÔ∏è KBO Ìôà/Ïñ¥Ïõ®Ïù¥ ÏÉÅÎåÄÏ†ÑÏ†Å Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å (' + ${data.totalGames} + 'Í≤ΩÍ∏∞ Í∏∞Ï§Ä)');
`;
        
        fs.writeFileSync('./magic-number/kbo-homeaway-data.js', jsContent);
        
        console.log('\nüíæ ÌååÏùº Ï†ÄÏû• ÏôÑÎ£å:');
        console.log('  üìÅ ./magic-number/kbo-homeaway-data.json');
        console.log('  üìÅ ./magic-number/kbo-homeaway-data.js');
        
        return data;
    }
}

// Ïã§Ìñâ Ìï®Ïàò
async function main() {
    console.log('üöÄ KBO Ìôà/Ïñ¥Ïõ®Ïù¥ ÏÉÅÎåÄÏ†ÑÏ†Å Ïä§ÌÅ¨ÎûòÌïë ÏãúÏûë...\n');
    
    const scraper = new KBOFinalScraper();
    
    try {
        // 2025ÎÖÑ 3ÏõîÎ∂ÄÌÑ∞ ÌòÑÏû¨ÍπåÏßÄ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
        const gamesCollected = await scraper.scrapeSeasonData('20250301');
        
        if (gamesCollected > 0) {
            const data = await scraper.saveData();
            console.log('\nüéâ Ïä§ÌÅ¨ÎûòÌïë ÏÑ±Í≥µ!');
            console.log(`üìä Ï¥ù ${gamesCollected}Í≤ΩÍ∏∞ Îç∞Ïù¥ÌÑ∞ ÏàòÏßë ÏôÑÎ£å`);
            console.log(`‚è∞ ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: ${new Date(data.lastUpdated).toLocaleString('ko-KR')}`);
            
            // ÏÉòÌîå Îç∞Ïù¥ÌÑ∞ Ï∂úÎ†•
            console.log('\nüìà ÏÉòÌîå Ìôà/Ïñ¥Ïõ®Ïù¥ Ï†ÑÏ†Å:');
            console.log(`ÌïúÌôî vs LG Ìôà: ${data.homeAwayBreakdown['ÌïúÌôî']['LG'].home}`);
            console.log(`ÌïúÌôî vs LG ÏõêÏ†ï: ${data.homeAwayBreakdown['ÌïúÌôî']['LG'].away}`);
            
        } else {
            console.log('\n‚ö†Ô∏è ÏàòÏßëÎêú Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.');
            console.log('ÌòÑÏû¨ ÏãúÏ¶åÏù¥ ÏãúÏûëÎêòÏßÄ ÏïäÏïòÍ±∞ÎÇò ÏõπÏÇ¨Ïù¥Ìä∏ Íµ¨Ï°∞Í∞Ä Î≥ÄÍ≤ΩÎêòÏóàÏùÑ Ïàò ÏûàÏäµÎãàÎã§.');
        }
        
    } catch (error) {
        console.error('\n‚ùå Ïä§ÌÅ¨ÎûòÌïë Ï§ë Ïò§Î•ò Î∞úÏÉù:', error.message);
    }
}

// ÏßÅÏ†ë Ïã§Ìñâ Ïãú
if (require.main === module) {
    main();
}

module.exports = KBOFinalScraper;