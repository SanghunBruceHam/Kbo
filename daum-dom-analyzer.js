#!/usr/bin/env node

/**
 * Daum Sports DOM Íµ¨Ï°∞ Ï†ïÎ∞Ä Î∂ÑÏÑùÍ∏∞
 */

const puppeteer = require('puppeteer');

class DaumDOMAnalyzer {
    constructor() {
        this.browser = null;
        this.page = null;
        console.log('üîç Daum Sports DOM Íµ¨Ï°∞ Ï†ïÎ∞Ä Î∂ÑÏÑù ÏãúÏûë...\n');
    }

    async init() {
        console.log('üöÄ Î∏åÎùºÏö∞Ï†Ä ÏãúÏûë...');
        this.browser = await puppeteer.launch({
            headless: false,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        });
        
        this.page = await this.browser.newPage();
        await this.page.setUserAgent('Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36');
        await this.page.setViewport({ width: 1920, height: 1080 });
        
        console.log('‚úÖ Î∏åÎùºÏö∞Ï†Ä Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    }

    async analyzeDaumStructure() {
        try {
            const url = 'https://sports.daum.net/schedule/kbo?date=202507';
            console.log(`üì° ÌéòÏù¥ÏßÄ Î°úÎìú: ${url}`);
            
            await this.page.goto(url, { waitUntil: 'networkidle2', timeout: 30000 });
            await new Promise(resolve => setTimeout(resolve, 5000));

            // DOM Íµ¨Ï°∞ ÏÉÅÏÑ∏ Î∂ÑÏÑù
            const analysis = await this.page.evaluate(() => {
                console.log('=== DOM Íµ¨Ï°∞ ÏÉÅÏÑ∏ Î∂ÑÏÑù ÏãúÏûë ===');
                
                const result = {
                    tables: [],
                    sampleRows: [],
                    teamElements: [],
                    scoreElements: []
                };
                
                // Î™®Îì† ÌÖåÏù¥Î∏î Î∂ÑÏÑù
                const tables = document.querySelectorAll('table');
                console.log(`Ï¥ù ÌÖåÏù¥Î∏î Ïàò: ${tables.length}`);
                
                tables.forEach((table, index) => {
                    const rows = table.querySelectorAll('tr');
                    const tableText = table.textContent || '';
                    const hasKBOContent = tableText.includes('LG') || tableText.includes('KIA') || tableText.includes('ÏÇºÏÑ±');
                    
                    if (hasKBOContent) {
                        console.log(`\n=== ÌÖåÏù¥Î∏î ${index + 1} (KBO Í¥ÄÎ†®) ===`);
                        console.log(`ÌÅ¥ÎûòÏä§: ${table.className}`);
                        console.log(`ID: ${table.id}`);
                        console.log(`Ìñâ Ïàò: ${rows.length}`);
                        
                        const tableInfo = {
                            index: index,
                            className: table.className,
                            id: table.id,
                            rowCount: rows.length,
                            sampleRows: []
                        };
                        
                        // Í∞Å Ìñâ Î∂ÑÏÑù (Ï≤òÏùå 20Í∞úÎßå)
                        Array.from(rows).slice(0, 20).forEach((row, rowIndex) => {
                            const cells = row.querySelectorAll('td, th');
                            if (cells.length > 0) {
                                const cellData = Array.from(cells).map(cell => {
                                    const text = cell.textContent?.trim() || '';
                                    const img = cell.querySelector('img');
                                    const imgAlt = img ? img.alt : '';
                                    const className = cell.className;
                                    
                                    return {
                                        text: text,
                                        imgAlt: imgAlt,
                                        className: className,
                                        combined: (text + ' ' + imgAlt).trim()
                                    };
                                });
                                
                                const rowInfo = {
                                    rowIndex: rowIndex,
                                    cellCount: cells.length,
                                    cells: cellData,
                                    fullText: row.textContent?.trim() || ''
                                };
                                
                                console.log(`Ìñâ ${rowIndex}: ${cells.length}ÏÖÄ - ${rowInfo.fullText.substring(0, 100)}`);
                                tableInfo.sampleRows.push(rowInfo);
                                
                                // ÌåÄÎ™ÖÏù¥ Ìè¨Ìï®Îêú Ìñâ ÌäπÎ≥Ñ Î∂ÑÏÑù
                                const teams = ['LG', 'ÏÇºÏÑ±', 'KT', 'SSG', 'NC', 'KIA', 'Î°ØÎç∞', 'ÎëêÏÇ∞', 'ÌÇ§ÏõÄ', 'ÌïúÌôî'];
                                const hasTeam = teams.some(team => rowInfo.fullText.includes(team));
                                
                                if (hasTeam) {
                                    console.log(`  ‚≠ê ÌåÄÎ™Ö Ìè¨Ìï® Ìñâ: ${rowInfo.fullText}`);
                                    console.log(`  ÏÖÄ ÏÉÅÏÑ∏:`);
                                    cellData.forEach((cell, cellIndex) => {
                                        if (cell.combined) {
                                            console.log(`    ÏÖÄ${cellIndex}: "${cell.combined}" (class: ${cell.className})`);
                                        }
                                    });
                                }
                            }
                        });
                        
                        result.tables.push(tableInfo);
                    }
                });
                
                // ÌåÄ Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ Ï∞æÍ∏∞
                const teamImages = document.querySelectorAll('img[alt*="LG"], img[alt*="KIA"], img[alt*="ÏÇºÏÑ±"], img[alt*="KT"], img[alt*="SSG"], img[alt*="NC"], img[alt*="Î°ØÎç∞"], img[alt*="ÎëêÏÇ∞"], img[alt*="ÌÇ§ÏõÄ"], img[alt*="ÌïúÌôî"]');
                console.log(`\nÌåÄ Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ Ïàò: ${teamImages.length}`);
                
                teamImages.forEach((img, index) => {
                    if (index < 10) { // Ï≤òÏùå 10Í∞úÎßå
                        console.log(`Ïù¥ÎØ∏ÏßÄ ${index + 1}: alt="${img.alt}", src="${img.src.substring(0, 50)}..."`);
                        result.teamElements.push({
                            alt: img.alt,
                            src: img.src,
                            parentText: img.parentElement?.textContent?.trim() || ''
                        });
                    }
                });
                
                // Ï†êÏàò Ìå®ÌÑ¥ Ï∞æÍ∏∞
                const allText = document.body.textContent || '';
                const scoreMatches = [...allText.matchAll(/(\d+)\s*:\s*(\d+)/g)];
                console.log(`\nÏ†êÏàò Ìå®ÌÑ¥ (X:Y) Î∞úÍ≤¨: ${scoreMatches.length}Í∞ú`);
                
                scoreMatches.slice(0, 10).forEach((match, index) => {
                    console.log(`Ï†êÏàò ${index + 1}: ${match[0]}`);
                    result.scoreElements.push(match[0]);
                });
                
                return result;
            });

            console.log('\nüìä Î∂ÑÏÑù ÏôÑÎ£å');
            console.log(`KBO Í¥ÄÎ†® ÌÖåÏù¥Î∏î: ${analysis.tables.length}Í∞ú`);
            console.log(`ÌåÄ Ïù¥ÎØ∏ÏßÄ: ${analysis.teamElements.length}Í∞ú`);
            console.log(`Ï†êÏàò Ìå®ÌÑ¥: ${analysis.scoreElements.length}Í∞ú`);
            
            // Í∞ÄÏû• Ïú†Î†•Ìïú ÌÖåÏù¥Î∏îÏùò Íµ¨Ï°∞ Ï∂úÎ†•
            if (analysis.tables.length > 0) {
                const mainTable = analysis.tables[0];
                console.log(`\nüéØ Î©îÏù∏ ÌÖåÏù¥Î∏î Íµ¨Ï°∞ (ÌÖåÏù¥Î∏î ${mainTable.index + 1}):`);
                console.log(`ÌÅ¥ÎûòÏä§: ${mainTable.className}`);
                console.log(`Ï¥ù Ìñâ Ïàò: ${mainTable.rowCount}`);
                
                console.log('\nüìã ÏÉòÌîå ÌñâÎì§:');
                mainTable.sampleRows.forEach(row => {
                    if (row.cells.some(cell => cell.combined.length > 0)) {
                        console.log(`\nÌñâ ${row.rowIndex} (${row.cellCount}ÏÖÄ):`);
                        row.cells.forEach((cell, cellIndex) => {
                            if (cell.combined) {
                                console.log(`  ÏÖÄ${cellIndex}: "${cell.combined}"`);
                            }
                        });
                    }
                });
            }
            
            // ÏÇ¨Ïö©Ïûê ÏûÖÎ†• ÎåÄÍ∏∞
            console.log('\n‚è∏Ô∏è  Î∏åÎùºÏö∞Ï†ÄÏóêÏÑú ÌéòÏù¥ÏßÄÎ•º ÌôïÏù∏ÌïòÍ≥† EnterÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî...');
            
            return analysis;

        } catch (error) {
            console.error(`‚ùå Î∂ÑÏÑù Ïã§Ìå®: ${error.message}`);
            return null;
        }
    }

    async close() {
        if (this.browser) {
            console.log('\nüîö 5Ï¥à ÌõÑ Î∏åÎùºÏö∞Ï†Ä Ï¢ÖÎ£å...');
            setTimeout(async () => {
                await this.browser.close();
            }, 5000);
        }
    }
}

// Ïã§Ìñâ
async function main() {
    const analyzer = new DaumDOMAnalyzer();
    
    try {
        await analyzer.init();
        await analyzer.analyzeDaumStructure();
    } catch (error) {
        console.error('‚ùå Î∂ÑÏÑù Ï§ë Ïò§Î•ò:', error);
    } finally {
        await analyzer.close();
    }
}

if (require.main === module) {
    main();
}